package com.travel.daily.traveldaily.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.travel.daily.traveldaily.dao.BillBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BILL_BEAN".
*/
public class BillBeanDao extends AbstractDao<BillBean, Long> {

    public static final String TABLENAME = "BILL_BEAN";

    /**
     * Properties of entity BillBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property ImgUrl = new Property(1, String.class, "imgUrl", false, "IMG_URL");
        public final static Property Detail = new Property(2, String.class, "detail", false, "DETAIL");
        public final static Property Price = new Property(3, Float.class, "price", false, "PRICE");
        public final static Property Time = new Property(4, Long.class, "time", false, "TIME");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property BgUrl = new Property(6, String.class, "bgUrl", false, "BG_URL");
        public final static Property SubBill = new Property(7, String.class, "subBill", false, "SUB_BILL");
    };


    public BillBeanDao(DaoConfig config) {
        super(config);
    }
    
    public BillBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BILL_BEAN\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IMG_URL\" TEXT," + // 1: imgUrl
                "\"DETAIL\" TEXT," + // 2: detail
                "\"PRICE\" REAL," + // 3: price
                "\"TIME\" INTEGER," + // 4: time
                "\"NAME\" TEXT," + // 5: name
                "\"BG_URL\" TEXT," + // 6: bgUrl
                "\"SUB_BILL\" TEXT);"); // 7: subBill
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BILL_BEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BillBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(2, imgUrl);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(3, detail);
        }
 
        Float price = entity.getPrice();
        if (price != null) {
            stmt.bindDouble(4, price);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(5, time);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String bgUrl = entity.getBgUrl();
        if (bgUrl != null) {
            stmt.bindString(7, bgUrl);
        }
 
        String subBill = entity.getSubBill();
        if (subBill != null) {
            stmt.bindString(8, subBill);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BillBean readEntity(Cursor cursor, int offset) {
        BillBean entity = new BillBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imgUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // detail
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // price
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // time
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bgUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // subBill
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BillBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImgUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDetail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrice(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBgUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSubBill(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BillBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BillBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
