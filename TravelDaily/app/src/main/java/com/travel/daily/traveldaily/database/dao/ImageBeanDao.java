package com.travel.daily.traveldaily.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.travel.daily.traveldaily.database.dao.ImageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGE_BEAN".
*/
public class ImageBeanDao extends AbstractDao<ImageBean, String> {

    public static final String TABLENAME = "IMAGE_BEAN";

    /**
     * Properties of entity ImageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ImgUrl = new Property(0, String.class, "imgUrl", true, "IMG_URL");
        public final static Property Pic = new Property(1, byte[].class, "pic", false, "PIC");
    };


    public ImageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ImageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGE_BEAN\" (" + //
                "\"IMG_URL\" TEXT PRIMARY KEY NOT NULL ," + // 0: imgUrl
                "\"PIC\" BLOB);"); // 1: pic
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGE_BEAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ImageBean entity) {
        stmt.clearBindings();
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(1, imgUrl);
        }
 
        byte[] pic = entity.getPic();
        if (pic != null) {
            stmt.bindBlob(2, pic);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ImageBean readEntity(Cursor cursor, int offset) {
        ImageBean entity = new ImageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // imgUrl
            cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1) // pic
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ImageBean entity, int offset) {
        entity.setImgUrl(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPic(cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(ImageBean entity, long rowId) {
        return entity.getImgUrl();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(ImageBean entity) {
        if(entity != null) {
            return entity.getImgUrl();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
